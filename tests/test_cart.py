
# Generated by CodiumAI
from typing import Any
from unittest.mock import MagicMock
from models.cart import Cart
from models.products import Product
from models.cart import CartItem


import pytest

from services.cart import CartService
from services.cart.exceptions import CartNotFoundException, UpdateFailedException
from services.generic import CartItemRepository, CartRepository

class TestCartService:

    # Adding items to the cart increases the item count
    def mock_product(self)->MagicMock:
       # Arrange: Create a mock Product instance
        return MagicMock(spec=Product)
    def mock_cart_item_repository(self)->MagicMock:
    # Arrange: Create a mock Product instance
        return MagicMock(spec=CartItemRepository)
    def mock_data(self,spec:Any):
            return MagicMock(spec=spec)

    # Adding a product to an existing cart with a matching item
    @pytest.mark.asyncio
    async def test_add_product_to_existing_cart_with_matching_item(self, mocker):
        # Given
        cart_id = "cart123"
        quantity=1
        product = self.mock_data(spec=Product)
        product.name="Product1"
        existing_cart_item = CartItem(product=product, quantity=2)
        cart = mocker.Mock()
        cart.id=cart_id
        cart.items = [existing_cart_item]
        cart_repository = self.mock_data(spec=CartRepository)
        cart_repository.find_by_id.return_value = cart
        cart_item_repository = self.mock_data(spec=CartItemRepository)
        service = CartService(cart_repository, cart_item_repository)
    
        # When
        await service.add_product_to_cart(cart_id, product, quantity)
    
        # Then
        assert len(cart.items) == 1
        assert cart.items[0].product.name == "Product1"
        assert cart.items[0].quantity == 3

    # Cart ID does not exist, raising "Cart not found" exception
    @pytest.mark.asyncio
    async def test_cart_id_not_found_exception(self, mocker):
        # Given
        cart_id = "nonexistent_cart"
        quantity = 1
        product = self.mock_data(spec=Product)
        product.name = "NewProduct"
        cart_repository = self.mock_data(spec=CartRepository)
        cart_repository.find_by_id.return_value = None
        cart_item_repository = self.mock_data(spec=CartItemRepository)
        service = CartService(cart_repository, cart_item_repository)

        # When / Then
        with pytest.raises(Exception) as excinfo:
            await service.add_product_to_cart(cart_id, product, quantity)
    
        assert str(excinfo.value) == "Cart not found"
        # Attempt to remove products from an empty cart
    # Cart with the given cart_id does not exist
    @pytest.mark.asyncio
    async def test_cart_not_found_exception(self, mocker):
        # Given
        cart_id = "cart123"
        product_ids = ["prod1", "prod2"]
        cart_repository = mocker.Mock(spec=CartRepository)
        cart_item_repository = mocker.Mock(spec=CartItemRepository)

        cart_repository.find_by_id.return_value = None
        service = CartService(cart_repository, cart_item_repository)
    
        # When / Then
        with pytest.raises(CartNotFoundException):
            await service.remove_products_from_cart(cart_id, product_ids)
    # Product_ids contain IDs that do not match any items in the cart
    @pytest.mark.asyncio
    async def test_non_matching_product_ids(self, mocker):
        # Given
        cart_id = "cart123"
        product_ids = ["nonexistent1", "nonexistent2"]
        cart = mocker.Mock(spec=Cart)
        cart.items=[
            self.mock_data(spec=CartItem),
              self.mock_data(spec=CartItem),
                  self.mock_data(spec=CartItem)


        ]
        cart.pop_cart_items_by_ids.return_value = cart.items  # No items removed
        cart_repository = mocker.Mock(spec=CartRepository)
        cart_item_repository = mocker.Mock(spec=CartItemRepository)

        cart_repository.find_by_id.return_value = cart
        cart_repository.update.return_value = False
        service = CartService(cart_repository, cart_item_repository)
        with pytest.raises(UpdateFailedException):
                await service.remove_products_from_cart(cart_id, product_ids)
    # Successfully removes products from the cart when valid cart_id and product_ids are provided
    @pytest.mark.asyncio
    async def test_successful_removal(self, mocker):
        # Given
        cart_id = "cart123"
        product_ids = ["prod1", "prod2"]
        cart = mocker.Mock(spec=Cart)
        cart.items = [mocker.Mock(spec=CartItem), mocker.Mock(spec=CartItem)]
        cart.pop_cart_items_by_ids.return_value = []
        cart_repository = mocker.Mock(spec=CartRepository)
        #mock

        cart_item_repository = mocker.Mock(spec=CartItemRepository)
        
        #mock
        cart_repository.find_by_id.return_value = cart
        cart_repository.update.return_value = True
        service = CartService(cart_repository, cart_item_repository)
    
        # When
        result = await service.remove_products_from_cart(cart_id, product_ids)
    
        # Then
        assert result is True
    
    # Updates the cart repository with the new list of items after removal
    @pytest.mark.asyncio
    async def test_update_cart_repository(self, mocker):
        # Given
        cart_id = "cart123"
        product_ids = ["prod1", "prod2"]
        cart = mocker.Mock(spec=Cart)
        cart.items = [mocker.Mock(spec=CartItem), mocker.Mock(spec=CartItem)]
        updated_items = []
        cart.pop_cart_items_by_ids.return_value = updated_items
        cart_repository = mocker.Mock(spec=CartRepository)
        cart_item_repository = mocker.Mock(spec=CartItemRepository)
        cart_repository.find_by_id.return_value = cart
        cart_repository.update.return_value = True
        service = CartService(cart_repository, cart_item_repository)
    
        # When
        await service.remove_products_from_cart(cart_id, product_ids)
    
        # Then
        cart_repository.update.assert_called_once_with(item_id=cart_id, updates={"cart_items": updated_items})