
# Generated by CodiumAI
from datetime import datetime
from typing import Any
from unittest.mock import MagicMock
from models.cart import Cart
from models.common import PyObjectId
from models.products import Product
from models.cart import CartItem


import pytest

from services.cart import CartService
from services.generic import CartItemRepository, CartRepository

class TestCartService:

    # Adding items to the cart increases the item count
    def mock_product(self)->MagicMock:
       # Arrange: Create a mock Product instance
        return MagicMock(spec=Product)
    def mock_cart_item_repository(self)->MagicMock:
    # Arrange: Create a mock Product instance
        return MagicMock(spec=CartItemRepository)
    def mock_data(self,spec:Any):
            return MagicMock(spec=spec)

    @pytest.mark.asyncio
    async def test_increase_item_quantity_if_cart_item_exists_in_cart(self):
        

         # Given
        cart = Cart(user_id="user123")
        product1 = self.mock_product()
        product2 = self.mock_product()
        product1.name="2 Door Oakavango"
        product1.price=180.00
        product2.name="Coffee table Oakavango"
        product2.price=100.00
        cart_item_repository=self.mock_data(spec=CartItemRepository)
        cart_repository=self.mock_data(spec=CartRepository)
        cart_service=CartService(cart_item_repository=cart_item_repository,
                                 cart_repository=cart_repository)

        
        cart_item1 = CartItem(product=product1, quantity=1)
        cart_item2 = CartItem(product=product2, quantity=1)
        
        cart.items=[cart_item1,cart_item2]
        current_cart_items_count=len(cart.items) 
        # When
        # cart.add_items_to_cart(cart_item1)
        await cart_service.add_product_to_cart(cart_id="cart123",product=product1,quantity=1)
        #Then
        assert current_cart_items_count==2

    # Adding a product to an existing cart with a matching item
    @pytest.mark.asyncio
    async def test_add_product_to_existing_cart_with_matching_item(self, mocker):
        # Given
        cart_id = "cart123"
        quantity=1
        product = self.mock_data(spec=Product)
        product.name="Product1"
        existing_cart_item = CartItem(product=product, quantity=2)
        cart = mocker.Mock()
        cart.id=cart_id
        cart.items = [existing_cart_item]
        cart_repository = mocker.Mock()
        cart_repository.find_by_id.return_value = cart
        cart_item_repository = mocker.Mock()
        service = CartService(cart_repository, cart_item_repository)
    
        # When
        await service.add_product_to_cart(cart_id, product, quantity)
    
        # Then
        assert len(cart.items) == 1
        assert cart.items[0].product.name == "Product1"
        assert cart.items[0].quantity == 3